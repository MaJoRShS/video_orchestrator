#!/usr/bin/env python3
"""
Script para visualizar transcri√ß√µes armazenadas no banco de dados
"""
import sqlite3
import sys

def check_transcriptions():
    try:
        conn = sqlite3.connect('video_database.db')
        cursor = conn.cursor()
        
        # Verifica se a tabela existe
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        print("üìã Tabelas encontradas:", [table[0] for table in tables])
        
        # Verifica se h√° v√≠deos no banco
        cursor.execute("SELECT COUNT(*) FROM videos")
        total_videos = cursor.fetchone()[0]
        print(f"üìä Total de v√≠deos no banco: {total_videos}")
        
        if total_videos == 0:
            print("‚ö†Ô∏è Nenhum v√≠deo encontrado no banco de dados.")
            return
        
        # Lista v√≠deos com transcri√ß√µes
        cursor.execute("""
            SELECT id, file_name, transcript_pt, transcript_en, created_at 
            FROM videos 
            WHERE transcript_pt IS NOT NULL OR transcript_en IS NOT NULL
            ORDER BY created_at DESC
        """)
        
        videos_with_transcripts = cursor.fetchall()
        
        if not videos_with_transcripts:
            print("‚ö†Ô∏è Nenhuma transcri√ß√£o encontrada no banco de dados.")
            return
        
        print(f"\nüé§ V√≠deos com transcri√ß√µes ({len(videos_with_transcripts)}):")
        print("=" * 80)
        
        for video in videos_with_transcripts:
            video_id, file_name, transcript_pt, transcript_en, created_at = video
            
            print(f"\nüìπ ID: {video_id}")
            print(f"üìÅ Arquivo: {file_name}")
            print(f"üìÖ Processado em: {created_at}")
            
            if transcript_pt:
                print(f"üáßüá∑ Transcri√ß√£o (PT) - {len(transcript_pt)} caracteres:")
                print(f"   {transcript_pt[:200]}{'...' if len(transcript_pt) > 200 else ''}")
            
            if transcript_en:
                print(f"üá∫üá∏ Transcri√ß√£o (EN) - {len(transcript_en)} caracteres:")
                print(f"   {transcript_en[:200]}{'...' if len(transcript_en) > 200 else ''}")
            
            print("-" * 80)
        
        conn.close()
        
    except sqlite3.Error as e:
        print(f"‚ùå Erro ao acessar banco de dados: {e}")
    except Exception as e:
        print(f"‚ùå Erro: {e}")

def show_full_transcript(video_id):
    """Mostra a transcri√ß√£o completa de um v√≠deo espec√≠fico"""
    try:
        conn = sqlite3.connect('video_database.db')
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT file_name, transcript_pt, transcript_en 
            FROM videos 
            WHERE id = ?
        """, (video_id,))
        
        result = cursor.fetchone()
        
        if not result:
            print(f"‚ùå V√≠deo com ID {video_id} n√£o encontrado.")
            return
        
        file_name, transcript_pt, transcript_en = result
        
        print(f"\nüìπ Arquivo: {file_name}")
        print("=" * 80)
        
        if transcript_pt:
            print(f"\nüáßüá∑ TRANSCRI√á√ÉO COMPLETA (PORTUGU√äS):")
            print(f"{transcript_pt}")
        
        if transcript_en:
            print(f"\nüá∫üá∏ TRANSCRI√á√ÉO COMPLETA (INGL√äS):")
            print(f"{transcript_en}")
        
        conn.close()
        
    except sqlite3.Error as e:
        print(f"‚ùå Erro ao acessar banco de dados: {e}")
    except Exception as e:
        print(f"‚ùå Erro: {e}")

if __name__ == "__main__":
    if len(sys.argv) > 1:
        try:
            video_id = int(sys.argv[1])
            show_full_transcript(video_id)
        except ValueError:
            print("‚ùå ID do v√≠deo deve ser um n√∫mero.")
    else:
        check_transcriptions()
        print(f"\nüí° Para ver a transcri√ß√£o completa de um v√≠deo, use:")
        print(f"   python check_transcriptions.py <ID_DO_VIDEO>")
