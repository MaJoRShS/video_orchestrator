#!/usr/bin/env python3
"""
Script de diagn√≥stico completo do Python
Identifica problemas de instala√ß√£o, PATH, permiss√µes, etc.
"""

import sys
import os
import subprocess
import platform
import site
from pathlib import Path

def print_header(title):
    print(f"\n{'='*60}")
    print(f"  {title}")
    print(f"{'='*60}")

def print_section(title):
    print(f"\nüîç {title}")
    print("-" * 50)

def run_command(cmd, description):
    """Executa comando e retorna resultado"""
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, shell=True)
        return result.returncode == 0, result.stdout.strip(), result.stderr.strip()
    except Exception as e:
        return False, "", str(e)

def check_python_installation():
    print_header("DIAGN√ìSTICO COMPLETO DO PYTHON")
    
    # Informa√ß√µes b√°sicas do sistema
    print_section("Sistema Operacional")
    print(f"OS: {platform.system()} {platform.release()}")
    print(f"Arquitetura: {platform.architecture()[0]}")
    print(f"Usu√°rio: {os.getenv('USERNAME', os.getenv('USER', 'Unknown'))}")
    
    # Informa√ß√µes do Python
    print_section("Python - Informa√ß√µes B√°sicas")
    print(f"Vers√£o: {sys.version}")
    print(f"Execut√°vel: {sys.executable}")
    print(f"Plataforma: {sys.platform}")
    print(f"Encoding padr√£o: {sys.getdefaultencoding()}")
    
    # Verificar PATH do Python
    print_section("Python no PATH")
    success, output, error = run_command("python --version", "Verificar python no PATH")
    if success:
        print(f"‚úÖ Python no PATH: {output}")
    else:
        print(f"‚ùå Python n√£o encontrado no PATH")
        print(f"Erro: {error}")
    
    success, output, error = run_command("where python", "Localizar execut√°vel python")
    if success:
        print(f"‚úÖ Execut√°vel encontrado em: {output}")
    else:
        print(f"‚ùå Execut√°vel n√£o encontrado: {error}")
    
    # Verificar pip
    print_section("Pip - Gerenciador de Pacotes")
    try:
        import pip
        print(f"‚úÖ Pip importado: vers√£o {pip.__version__}")
    except ImportError:
        print("‚ùå Pip n√£o pode ser importado")
    
    success, output, error = run_command("pip --version", "Verificar pip no PATH")
    if success:
        print(f"‚úÖ Pip no PATH: {output}")
    else:
        print(f"‚ùå Pip n√£o encontrado no PATH: {error}")
    
    # Verificar paths importantes
    print_section("Paths e Diret√≥rios")
    print(f"sys.path[0]: {sys.path[0]}")
    print(f"Site packages: {site.getsitepackages()}")
    print(f"User site: {site.getusersitepackages()}")
    
    # Vari√°veis de ambiente
    print_section("Vari√°veis de Ambiente")
    path_env = os.getenv('PATH', '')
    python_paths = [p for p in path_env.split(os.pathsep) if 'python' in p.lower()]
    
    if python_paths:
        print("‚úÖ Paths do Python no PATH:")
        for p in python_paths:
            print(f"  - {p}")
    else:
        print("‚ùå Nenhum path do Python encontrado na vari√°vel PATH")
    
    pythonpath = os.getenv('PYTHONPATH')
    if pythonpath:
        print(f"PYTHONPATH: {pythonpath}")
    else:
        print("PYTHONPATH n√£o definido")
    
    # Verificar permiss√µes
    print_section("Permiss√µes")
    python_dir = Path(sys.executable).parent
    print(f"Diret√≥rio do Python: {python_dir}")
    
    if python_dir.exists():
        print(f"‚úÖ Diret√≥rio existe: {python_dir}")
        print(f"Permiss√£o leitura: {os.access(python_dir, os.R_OK)}")
        print(f"Permiss√£o escrita: {os.access(python_dir, os.W_OK)}")
        print(f"Permiss√£o execu√ß√£o: {os.access(python_dir, os.X_OK)}")
    else:
        print(f"‚ùå Diret√≥rio n√£o existe: {python_dir}")
    
    # Testar instala√ß√£o de pacote
    print_section("Teste de Instala√ß√£o de Pacotes")
    print("Testando instala√ß√£o do pacote 'requests'...")
    
    # Teste 1: Instala√ß√£o normal
    success, output, error = run_command("pip install requests", "Instala√ß√£o normal")
    if success:
        print("‚úÖ Instala√ß√£o normal funcionou")
    else:
        print(f"‚ùå Instala√ß√£o normal falhou: {error}")
        
        # Teste 2: Instala√ß√£o como usu√°rio
        success, output, error = run_command("pip install --user requests", "Instala√ß√£o como usu√°rio")
        if success:
            print("‚úÖ Instala√ß√£o como usu√°rio funcionou")
        else:
            print(f"‚ùå Instala√ß√£o como usu√°rio falhou: {error}")
    
    # Testar importa√ß√£o
    print_section("Teste de Importa√ß√£o")
    test_packages = ['os', 'sys', 'json', 'requests', 'numpy']
    
    for package in test_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package}")
        except ImportError as e:
            print(f"‚ùå {package}: {e}")
    
    # Verificar pacotes instalados
    print_section("Pacotes Instalados (pip list)")
    success, output, error = run_command("pip list", "Listar pacotes")
    if success:
        lines = output.split('\n')[:10]  # Mostrar apenas primeiros 10
        print("Primeiros 10 pacotes instalados:")
        for line in lines:
            print(f"  {line}")
        print("  ...")
    else:
        print(f"‚ùå Erro ao listar pacotes: {error}")

def generate_recommendations():
    print_section("Recomenda√ß√µes de Corre√ß√£o")
    
    # Verificar se python funciona
    success, _, _ = run_command("python --version", "")
    if not success:
        print("‚ùå PROBLEMA: Python n√£o encontrado no PATH")
        print("üìã SOLU√á√ÉO:")
        print("1. Reinstale o Python marcando 'Add to PATH'")
        print("2. Ou adicione manualmente ao PATH:")
        print("   - C:\\Python311")
        print("   - C:\\Python311\\Scripts")
        
    # Verificar se pip funciona
    success, _, _ = run_command("pip --version", "")
    if not success:
        print("\n‚ùå PROBLEMA: Pip n√£o encontrado")
        print("üìã SOLU√á√ÉO:")
        print("1. python -m ensurepip --upgrade")
        print("2. python -m pip install --upgrade pip")
        
    # Verificar permiss√µes
    python_dir = Path(sys.executable).parent
    if not os.access(python_dir, os.W_OK):
        print("\n‚ùå PROBLEMA: Sem permiss√£o de escrita no diret√≥rio Python")
        print("üìã SOLU√á√ÉO:")
        print("1. Execute como administrador")
        print("2. Ou use: pip install --user <pacote>")
        print("3. Ou crie ambiente virtual")

def main():
    try:
        check_python_installation()
        generate_recommendations()
        
        print_header("RESUMO")
        print("Diagn√≥stico conclu√≠do!")
        print("\nSe encontrou problemas:")
        print("1. Consulte o arquivo PYTHON_INSTALLATION_GUIDE.md")
        print("2. Execute install_dependencies.bat ap√≥s corrigir Python")
        print("3. Ou pe√ßa ajuda com as informa√ß√µes acima")
        
    except Exception as e:
        print(f"\n‚ùå Erro durante diagn√≥stico: {e}")
        print("Isso pode indicar problemas graves na instala√ß√£o do Python")

if __name__ == "__main__":
    main()
